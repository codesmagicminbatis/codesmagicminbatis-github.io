{
  
  "0": {
    "title": "Add @Param Annotation",
    "content": "Add @Param Annotation . MinBatis provides an intention action to add @Param to method parameter more convenient. MinBatis automatically adds prefix to existing parameter in SQL statement when adding @Param annotation. This is also a very useful feature when we do refactor (e.g., add more parameter to the mapper method, etc.). .",
    "url": "http://localhost:4000/docs/add-param-annotation.html",
    "relUrl": "/docs/add-param-annotation.html"
  }
  ,"1": {
    "title": "Auto Folding/Unfolding",
    "content": "Auto Folding/Unfolding . In order to improve SQL readability, MinBatis auto folds SQL statement in Java annotation when it loses focus and a SQL statement is unfolded when it get focused again to make it easy for editing. Focus here means that the caret is placed on a SQL statement. . . Auto-unfolding is made 500ms delayed when a SQL statement get focused in order to avoid unexpected unfolding when we move caret by keyboard narrows quickly. . Let’s see what it looks like: .",
    "url": "http://localhost:4000/docs/auto-folding-unfolding.html",
    "relUrl": "/docs/auto-folding-unfolding.html"
  }
  ,"2": {
    "title": "Auto SQL Indent",
    "content": "SQL Indent . Indention is the string (containing of tabs and/or white spaces) that will be inserted automatically before the caret after you type ↩. . Normal SQL Indent . MinBatis support indent for normal SQL indent. . Dynamic SQL Indent . Indention works for script as well. .",
    "url": "http://localhost:4000/docs/auto-sql-indent.html",
    "relUrl": "/docs/auto-sql-indent.html"
  }
  ,"3": {
    "title": "CDATA Aware",
    "content": "CDATA Aware . Dynamic SQL is made CDATA aware in Java annotation and highlight it using gray color so that we can focus on SQL which we care more. . .",
    "url": "http://localhost:4000/docs/cddata-aware.html",
    "relUrl": "/docs/cddata-aware.html"
  }
  ,"4": {
    "title": "Change Log",
    "content": "2020.1.5 . New Features Type inference for OGNL method invocation | Identifier error highlighting in OGNL | Auto-completion for OGNL method invocation | Navigation for OGNL method invocation | . | Updates Improve dynamic tags parser | API compatibility on IntelliJ 2020.1 | . | Fixes Formatting issue after refactor | Bind name resolving and completion issue | SQL editing issue | Cache stability issue | NPE | . | . 2020.1.4 . New Features Formatting in mapper XML | Indent in mapper XML | Renaming in mapper XML | Navigation in mapper XML | Find usage in mapper XML | XML auto-completion in mapper XML | Smart SQL auto-completion in mapper XML | Smart SQL auto-completion in dynamic SQL | Error highlighting in mapper XML | Extract/Inline SQL fragment in mapper XML | Copy SQL in mapper XML | Support marker attribute value separated with ‘.’ | Suppress unreasonable SQL syntax error in dynamic script and mapper XML | Support dynamic parameter in marker property | Rename attribute value variable in script and mapper XML | Support type alias | Rename mapper file when rename mapper interface if mapper file name matches interface name | Generate mapper XML file and statement in mapper XML | Reference elements between annotation and mapper XML | Support referencing multi result map | Update parameters when invoking ‘Add @Param’ action in dynamic script and mapper XML | Auto completion of result map and select statement defined as Java method | Find usage by go to declaration action | Add more inspections | Support ‘columnPrefix’ | Spring (Boot) integration | Report bug just from IDE | . | Updates Update add @Param context | Update short type name in auto-completion | Spring integration | . | Fixes Copy dynamic script with double quotation marks | Type inferring bugs | Native lib linking issue | . | . 2020.1 . New Features Dynamic SQL Parsing | Auto folding/unfolding | Auto SQL indent | SQL Format | Context/Type Infer | Add @Param annotation | Code Completion | Find Usage | Renaming | Inspections | OGNL Support | . | .",
    "url": "http://localhost:4000/docs/change-log.html",
    "relUrl": "/docs/change-log.html"
  }
  ,"5": {
    "title": "Code Completion",
    "content": "Code Completion . MinBatis provides various auto-completion and it’s smart enough to suggest completion strings according to different contexts. . Data Source . MinBatis provides IntelliJ data source integration which many data source related features are built upon (e.g., auto-completion, inspections, navigation, refactoring, etc.) You can find more details about how to setup data source at Managing data sources. . SQL Dialect . Some features are available as soon as SQL dialect is configured, so you’d better configure the SQL dialect for your project. You can find more details about how to configure SQL dialect at SQL Dialects. . SQL Provider Method Auto-Completion . . Script Auto-Completion . . Parameter Auto-Completion . . Result Property Auto-Completion . . Various Column Auto-Completion . . Arg Name Auto-Completion . . Chained Auto-Completion . . Indexed Auto-Completion . . Support Generic . . Context Aware Auto-Completion . . Attribute Auto-Completion . . Reference Auto-Completion . . Options Key Property Auto-Completion . . Select Key Property Auto-Completion . . Select Key Column Auto-Completion . . More . There are more auto-completions available that we’re not listing here. .",
    "url": "http://localhost:4000/docs/code-completion.html",
    "relUrl": "/docs/code-completion.html"
  }
  ,"6": {
    "title": "Compatibility",
    "content": "Compatibility . MinBatis may not be compatible with the following plugins: . Our previous MyBatis plugin | MyBatisCodeHelperPro | . Missing Features . You can Contact Us if you need any features that incompatible plugins provide. .",
    "url": "http://localhost:4000/docs/compatibility.html",
    "relUrl": "/docs/compatibility.html"
  }
  ,"7": {
    "title": "Convert to Dynamic SQL",
    "content": "Convert to Dynamic SQL . There are times while writing plain SQL, we find that we need dynamic SQL instead of plain one. MinBatis provides an intention action to convert plain SQL to dynamic SQL. This saves the time of moving caret and typing. The code is also well formatted after converted to dynamic SQL. .",
    "url": "http://localhost:4000/docs/convert-to-dynamic.html",
    "relUrl": "/docs/convert-to-dynamic.html"
  }
  ,"8": {
    "title": "Copy SQL",
    "content": "Copy SQL . There are situation we may need to copy the SQL (dynamic SQL) from our code. MinBatis provides an intention action to do this. It’s very useful in Java annotation and for dynamic SQL. MinBatis replaces proper elements for dynamic SQL when copying the SQL. . Do format SQL before copy it. .",
    "url": "http://localhost:4000/docs/copy-sql.html",
    "relUrl": "/docs/copy-sql.html"
  }
  ,"9": {
    "title": "Discussion/Coupon",
    "content": "Discussion . You can use 钉钉 to discuss anything with us about the plugin. . Just scan the QR bellow to join the discussion. . . Coupon . We have a limited number of coupons available for our old MyBatis plugin paid customers. The top 50 paid users of MyBatis plugin joining the DingTalk group can get a coupon. .",
    "url": "http://localhost:4000/docs/discussion.html",
    "relUrl": "/docs/discussion.html"
  }
  ,"10": {
    "title": "Dynamic SQL Parsing",
    "content": "MyBatis Plugin . There are two main issues that our previous MyBatis Plugin can’t handle properly. Let’s see what’s are these. . Dynamic SQL in Annotation . MyBatis Plugin can’t parse dynamic SQL in Java annotation which causes many unexpected errors like this: . . Parse Dynamic SQL . MyBatis Plugin can’t parse dynamic SQL which causes that some syntax errors are ignored. . . MinBatis . MinBatis can parse dynamic SQL well and the two main issues are gone. . Dynamic SQL in Annotation . MinBatis supports dynamic SQL in Java annotation. . . Parse Dynamic SQL . MinBatis parses dynamic SQL properly. . . Other Features . As we’ll see that some other features are implemented based on the correctly parsed dynamic SQL. .",
    "url": "http://localhost:4000/docs/dynamic-sql-parsing.html",
    "relUrl": "/docs/dynamic-sql-parsing.html"
  }
  ,"11": {
    "title": "Find Usage",
    "content": "Find Usage . When you write or edit code, you might come across a code element that you want to change or delete. Before you make the changes, it is a good practice to see where the code element is used and how it affects the application. With the Find Usages actions you can search for the references of your code element throughout the whole codebase. You can find more about Find Usage at Search for usages. . With MinBatis, you can find the usage of elements that may be potentially used by MyBatis framework. . Getter/Setter Method . . Bean Field . . Parameter . . @Param . . Constructor Parameter . . Table Column . . Mark Symbol as Used . Without MinBatis, some symbols will be marked as never used or never assigned by IntelliJ IDEA even if it’s actually used by MyBatis framework. . . MinBatis can detect those symbols used by MyBatis framework and mark them as used, finally the highlighting is gone. This also works for private members. . .",
    "url": "http://localhost:4000/docs/find-usage.html",
    "relUrl": "/docs/find-usage.html"
  }
  ,"12": {
    "title": "Home",
    "content": "Focus on your application . MinBatis is a desired IntelliJ IDEA plugin for these users who are working with MyBatis framework. It saves you a lot of time on typing and helps you discover errors early. . Purchase Download . . Getting started . Download IntelliJ IDEA . MinBatis runs as a plugin of IntelliJ IDEA Ultimate. You need to install IntelliJ IDEA Ultimate first, visit here to download and install it. . Install MinBatis . If this is the first time you’ve started the app, you’ll see the welcome screen: . . To install MinBatis, open the plugins dialog from the configure menu: . . Type MinBatis to search it and then install the plugin from browse repositories dialog: . . You need to restart the IDEA after you install the plugin. .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"13": {
    "title": "Inspections",
    "content": "Error Highlighting . MinBatis resolves symbols according to how MyBatis framework uses them and highlights the symbols which MyBatis framework can’t parse. This feature can lead us to discover our code error earlier before we run the application. . . Inspections . MinBatis have many inspections which are implemented based on MyBatis source code. They are very useful and save us a lot of time on debugging. There are many inspections available now and we gonna add more of them in the future. . .",
    "url": "http://localhost:4000/docs/inspections.html",
    "relUrl": "/docs/inspections.html"
  }
  ,"14": {
    "title": "Navigation",
    "content": "Navigation . With MinBatis, we can navigate through code using different actions and popups. Navigation is context-aware which means it navigates to different elements according to different contexts. .",
    "url": "http://localhost:4000/docs/navigation.html",
    "relUrl": "/docs/navigation.html"
  }
  ,"15": {
    "title": "OGNL Support",
    "content": "OGNL Support . MyBatis uses OGNL to support dynamic SQL which is very powerful. You can find more details about OGNL at Dynamic SQL. . You can use it with following elements in dynamic SQL: . if | when | bind | dynamic parameter | . MinBatis integrates OGNL to support auto-completion, inspections, navigation, refactoring, etc. . . OGNL Identifier . Our previous MyBatis plugin can’t parse OGNL identifier well which causes some features (e.g., identifier chain, find usage, rename refactor, etc.) are missing. MinBatis parses OGNL identifier the right way which provides the missing features. . .",
    "url": "http://localhost:4000/docs/ognl-support.html",
    "relUrl": "/docs/ognl-support.html"
  }
  ,"16": {
    "title": "Parameter Expression",
    "content": "Parameter Expression . Mybatis supports simple parameter expression in SQL statements. Parameters can specify a more specific data type in SQL parameter with parameter expression. You can find more details about parameter expression at MyBatis Documentation and ParameterExpression . Builtin Support . The plugin integrates parameter expression as a custom language in IntelliJ. It’s context-aware and very useful. . Color Scheme . You can customize the color scheme for the custom language in settings. Open the configuration dialog via Preferences/Settings -&gt; Editor -&gt; Color Scheme -&gt; Min Marker. . .",
    "url": "http://localhost:4000/docs/parameter-expression.html",
    "relUrl": "/docs/parameter-expression.html"
  }
  ,"17": {
    "title": "Rename Refactor",
    "content": "Rename Refactor . Rename refactor is a common action in our daily work and MinBatis makes it easier when working with MyBatis framework. . Rename Getter/Setter Method . Rename Bean Field . Rename Parameter . Rename @Param . Rename Constructor Parameter . Rename Table Column .",
    "url": "http://localhost:4000/docs/rename-refactor.html",
    "relUrl": "/docs/rename-refactor.html"
  }
  ,"18": {
    "title": "SQL Format",
    "content": "SQL Format . MinBatis can format SQL (dynamic SQL) in Java annotation. . Code Style . We can configure the code style via Preferences/Settings -&gt; Editor -&gt; Code Style -&gt; MinBatis. . Formatter Control . Use formatter marker to disable code formatting for some part of the code. Open the configuration dialog via Preferences/Settings -&gt; Editor -&gt; Code Style -&gt; Formatter Control. . .",
    "url": "http://localhost:4000/docs/sql-format.html",
    "relUrl": "/docs/sql-format.html"
  }
  
}